from random import random
from math import fabs
def compare(o1,o2):
    if o1<o2:
        return -1
    elif o1==o2:
        return 0
    else:
        return 1

def list_BinarySearch(arr,key):
    low=0
    high=len(arr)-1
    while low<=high:
        mid=low+(high-low)//2
        midVal=arr[mid]
        cmp=compare(midVal,key)
        if cmp<0:
            low=mid+1
        elif cmp>0:
            high=mid-1
        else:
            return mid
    return -1


def nonUniformRandomNumberGeneration(values:list,probabilities:list):
    prefixSumOfProbabilities=[]
    prefixSumOfProbabilities.append(0.0)
    for p in probabilities:
        prefixSumOfProbabilities.append(prefixSumOfProbabilities[len(prefixSumOfProbabilities)-1]+p)
    uniform01=random()
    it=list_BinarySearch(prefixSumOfProbabilities,uniform01)
    if it<0:
        intervalidx= fabs(it)-2
        return values[int(intervalidx)]
    else:
        return values[it]

a=[3,5,7,11,15]
p=[1/2,1/3,1/5,1/9,1/18]
res=nonUniformRandomNumberGeneration(a,p)
print('Random Number is:',res)
