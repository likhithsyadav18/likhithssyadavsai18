def print_grid(arr):
    for i in range(9):
        print('Row',i+1,':')
        for j in range(9):
            print(arr[i][j],end=" ")
        print( )

def find_empty_location(arr, l):
    for row in range(9):
        for col in range(9):
            if (arr[row][col] == 0):
                l[0] = row
                l[1] = col
                return True
    return False


def num_used_in_row(arr, row, num):
    for i in range(9):
        if (arr[row][i] == num):
            return True
    return False


def num_used_in_col(arr, col, num):
    for i in range(9):
        if (arr[i][col] == num):
            return True
    return False


def num_used_in_box(arr, row, col, num):
    for i in range(3):
        for j in range(3):
            if (arr[i + row][j + col] == num):
                return True
    return False


def check_location_is_safe(arr, row, col, num):
    return not (num_used_in_row(arr, row, num) or num_used_in_col(arr, col, num)) and not num_used_in_box(arr,row - row % 3,col - col % 3,num)

def solve_sudoku(arr):
    l = [0, 0]                # keeps the record of row and col in find_empty_location Function
    if (not find_empty_location(arr, l)):
        return True

    row = l[0]
    col = l[1]
    for num in range(1, 10):
        if (check_location_is_safe(arr, row, col, num)):
            arr[row][col] = num
            if (solve_sudoku(arr)):
                return True
            arr[row][col] = 0
    return False


grid = []
for y in range(9):
    grid.append([0 for x in range(9)])
# row-wise
grid = [
    [0, 9, 0, 0, 0, 7, 0, 3, 0], [0, 1, 0, 0, 9, 6, 7, 4, 0], [0, 5, 0, 0, 0, 0, 0, 0, 6],
    [0, 0, 0, 0, 1, 0, 0, 0, 8], [1, 8, 5, 7, 6, 3, 4, 2, 0], [0, 7, 4, 9, 0, 8, 5, 0, 0],
    [8, 2, 7, 0, 0, 0, 0, 1, 3], [0, 4, 0, 8, 3, 0, 0, 0, 7], [0, 3, 0, 6, 0, 2, 0, 8, 0]
]

if (solve_sudoku(grid)):
    print_grid(grid)
else:
    print("No solution exists")
